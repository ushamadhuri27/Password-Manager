from cryptography.fernet import Fernet

# Uncomment and run this function once to generate a key and save it to key.key
'''
def write_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)
'''

def load_key():
    with open("key.key", "rb") as key_file:
        key = key_file.read()
    return key

def view_passwords(fernet):
    try:
        with open('passwords.txt', 'r') as password_file:
            for line in password_file.readlines():
                user, encrypted_password = line.strip().split("|")
                decrypted_password = fernet.decrypt(encrypted_password.encode()).decode()
                print(f"User: {user} | Password: {decrypted_password}")
    except FileNotFoundError:
        print("No passwords found. Add some first!")

def add_password(fernet):
    account_name = input('Account Name: ')
    password = input('Password: ')

    encrypted_password = fernet.encrypt(password.encode()).decode()
    with open('passwords.txt', 'a') as password_file:
        password_file.write(f"{account_name}|{encrypted_password}\n")

def main():
    key = load_key()
    fernet = Fernet(key)

    while True:
        mode = input("Would you like to add a new password or view existing ones (view, add)? Press q to quit: ").lower()
        if mode == "q":
            break
        elif mode == "view":
            view_passwords(fernet)
        elif mode == "add":
            add_password(fernet)
        else:
            print("Invalid mode. Please choose 'view', 'add', or 'q' to quit.")

if __name__ == "__main__":
    main()
